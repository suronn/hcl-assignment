package com.assignment.mortgage;

import com.assignment.mortgage.controller.MortgageController;
import com.assignment.mortgage.jpa.MortgageRate;
import com.assignment.mortgage.repository.MortgageRateRepository;
import com.assignment.mortgage.service.MortgageService;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Named;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.context.bean.override.mockito.MockitoBean;
import org.springframework.test.web.servlet.MockMvc;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
//@ActiveProfiles("test")
//@ExtendWith(MockitoExtension.class)
//@WebMvcTest(MortgageController.class)
public class MortgageControllerTests {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @MockitoBean
    private MortgageService mortgageService;

    @MockitoBean
    private MortgageRateRepository mortgageRateRepository;

    private MortgageController mortgageController;

    @BeforeEach
    public void setUp() {
        mortgageController = new MortgageController(mortgageService);
//        mockMvc = standaloneSetup(mortgageController).build(); // Set up the MockMvc with the controller
    }

    public static Stream<Arguments> feasibleMortgageRequests() {
        return Stream.of(
                Arguments.of(Named.of("Loan value is less than the home value", new MortgageCheckRequest(new BigDecimal("100000"), 10, new BigDecimal("150000"), new BigDecimal("200000")))),
                Arguments.of(Named.of("Loan value is equal than the home value", new MortgageCheckRequest(new BigDecimal("100000"), 10, new BigDecimal("200000"), new BigDecimal("200000")))),
                Arguments.of(Named.of("Mortgage is less than 4 times the income", new MortgageCheckRequest(new BigDecimal("100000"), 10, new BigDecimal("150000"), new BigDecimal("200000"))))
        );
    }

    public static Stream<Arguments> notFeasibleMortgageRequests() {
        return Stream.of(
                Arguments.of(Named.of("Loan value is greater than the home value", new MortgageCheckRequest(new BigDecimal("100000"), 10, new BigDecimal("200000"), new BigDecimal("150000")))),
                Arguments.of(Named.of("Mortgage is greater than 4 times the income", new MortgageCheckRequest(new BigDecimal("4000"), 10, new BigDecimal("1500000"), new BigDecimal("200000"))))
        );
    }

    @Test
    void testGetInterestRates() throws Exception {
        // When
        MortgageRate rate1 = new MortgageRate(10, new BigDecimal("0.05"), LocalDateTime.now());
        MortgageRate rate2 = new MortgageRate(10, new BigDecimal("0.03"), LocalDateTime.now());
        final var mortgageRates = Arrays.asList(rate1, rate2);
        when(mortgageService.getInterestRates()).thenReturn(mortgageRates);

        // Then
        String response = mockMvc.perform(get("/api/interest-rates"))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        List<MortgageRate> rates = objectMapper.readValue(response, new TypeReference<>() {
        });
        assertThat(rates).isNotEmpty();
        assertThat(rates).containsExactlyInAnyOrder(rate1, rate2);
    }

    @ParameterizedTest
    @MethodSource("feasibleMortgageRequests")
    void testCheckMortgageFeasible(MortgageCheckRequest request) throws Exception {
        String requestBody = objectMapper.writeValueAsString(request);

        String response = mockMvc.perform(post("/api/mortgage-check")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(requestBody))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        MortgageCheckResponse mortgageResponse = objectMapper.readValue(response, MortgageCheckResponse.class);
        assertThat(mortgageResponse.isFeasible()).isTrue();
        assertThat(mortgageResponse.getMonthlyCost()).isPositive();
    }

    @ParameterizedTest
    @MethodSource("notFeasibleMortgageRequests")
    void testCheckMortgageNotFeasible(MortgageCheckRequest request) throws Exception {
        String requestBody = objectMapper.writeValueAsString(request);

        String response = mockMvc.perform(post("/api/mortgage-check")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(requestBody))
//                .andExpect(status().isBadRequest())
                .andReturn()
                .getResponse()
                .getContentAsString();

        MortgageCheckErrorResponse mortgageResponse = objectMapper.readValue(response, MortgageCheckErrorResponse.class);
        assertThat(mortgageResponse.getMessage()).contains("Request Error");
        assertThat(mortgageResponse.getStatus()).isEqualTo(HttpStatus.BAD_REQUEST.value());
    }
}
